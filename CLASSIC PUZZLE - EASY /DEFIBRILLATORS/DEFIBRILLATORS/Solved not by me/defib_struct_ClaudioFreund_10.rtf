{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <stdlib.h>\
#include <stdio.h>\
#include <string.h>\
#include <math.h> \
\
typedef struct\
\{\
    char   id;\
    char   name[100];\
    char   addr[100];\
    char   phone[100];\
    double lon;\
    double lat;\
\} DEFIB;\
\
void replace(char *buffer, char chr, char new);\
char*split(char *buffer, char delimiter);\
void parse_defib(char *buffer, DEFIB *defib);\
\
int main()\
\{\
    char LON[51];\
    scanf("%s", LON);\
    replace(LON, ',', '.');\
    double user_lon = atof(LON);\
    \
    char LAT[51];\
    scanf("%s", LAT);\
    replace(LAT, ',', '.');\
    double user_lat = atof(LAT);\
    \
    int N;\
    scanf("%d", &N); fgetc(stdin);\
    \
    int best_id = -1;\
    double best_d;\
    \
    DEFIB defib[N];\
    for (int i = 0; i < N; i++)\
    \{\
        char defib_in[257];\
        fgets(defib_in, 257, stdin);\
        parse_defib(defib_in, &defib[i]);\
        \
        double x = (user_lon - defib[i].lon) * cos((user_lat + defib[i].lat) / 2);\
        double y = (user_lat - defib[i].lat);\
        double d = sqrt((x * x) + (y * y)) * 6371;\
        if ((best_id == -1) || (d < best_d))\
        \{\
            best_id = i;\
            best_d = d;\
        \}\
    \}\
    \
    printf("%s\\n", defib[best_id].name);\
    \
    return 0;\
\}\
\
void parse_defib(char *buffer, DEFIB *defib)\
\{\
    int i;\
    char *p;\
    \
    memset(defib, 0, sizeof(*defib));\
    \
    for (i = 0, p = split(buffer, ';'); (i < 6) && p; i++, p = split(NULL, ';'))\
    \{\
        switch (i)\
        \{\
            case 0:\
                defib->id = atoi(p);\
                break;\
            case 1:\
                strncpy(defib->name, p, sizeof(defib->name));\
                break;\
            case 2:\
                strncpy(defib->addr, p, sizeof(defib->addr));\
                break;\
            case 3:\
                strncpy(defib->phone, p, sizeof(defib->phone));\
                break;\
            case 4:\
                replace(p, ',', '.');\
                defib->lon = atof(p);\
                break;\
            case 5:\
                replace(p, ',', '.');\
                defib->lat = atof(p);\
                break;\
        \}\
    \}\
\}\
\
void replace(char *buffer, char chr, char new)\
\{\
    while (*buffer)\
    \{\
        if (*buffer == chr)\
            *buffer = new;\
        ++buffer;\
    \}\
\}\
\
char*split(char *buffer, char delimiter)\
\{\
	static char *head, *tail;\
	\
	if (buffer)\
		head = tail = buffer;\
	else if (tail)\
		head = tail;\
	else\
		return 0;\
	\
	while (*tail)\
	\{\
		if (*tail == delimiter)\
		\{\
			*tail++ = 0;\
			return head;\
		\}\
		++tail;\
	\}\
	\
	return head;\
\}}